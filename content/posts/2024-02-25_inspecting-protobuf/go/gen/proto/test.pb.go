// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: proto/test.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message_AnEnum int32

const (
	Message_UNKNOWN Message_AnEnum = 0
	Message_A       Message_AnEnum = 1
	Message_B       Message_AnEnum = 2
	Message_C       Message_AnEnum = 3
)

// Enum value maps for Message_AnEnum.
var (
	Message_AnEnum_name = map[int32]string{
		0: "UNKNOWN",
		1: "A",
		2: "B",
		3: "C",
	}
	Message_AnEnum_value = map[string]int32{
		"UNKNOWN": 0,
		"A":       1,
		"B":       2,
		"C":       3,
	}
)

func (x Message_AnEnum) Enum() *Message_AnEnum {
	p := new(Message_AnEnum)
	*p = x
	return p
}

func (x Message_AnEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_AnEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_test_proto_enumTypes[0].Descriptor()
}

func (Message_AnEnum) Type() protoreflect.EnumType {
	return &file_proto_test_proto_enumTypes[0]
}

func (x Message_AnEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_AnEnum.Descriptor instead.
func (Message_AnEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_test_proto_rawDescGZIP(), []int{0, 0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AString         string             `protobuf:"bytes,1,opt,name=a_string,json=aString,proto3" json:"a_string,omitempty"`
	AEnum           Message_AnEnum     `protobuf:"varint,2,opt,name=a_enum,json=aEnum,proto3,enum=proto3_test.Message_AnEnum" json:"a_enum,omitempty"`
	AUint32         uint32             `protobuf:"varint,3,opt,name=a_uint32,json=aUint32,proto3" json:"a_uint32,omitempty"`
	ABytes          []byte             `protobuf:"bytes,4,opt,name=a_bytes,json=aBytes,proto3" json:"a_bytes,omitempty"`
	AInt64          int64              `protobuf:"varint,7,opt,name=a_int64,json=aInt64,proto3" json:"a_int64,omitempty"`
	ABool           bool               `protobuf:"varint,8,opt,name=a_bool,json=aBool,proto3" json:"a_bool,omitempty"`
	AFloat          float32            `protobuf:"fixed32,9,opt,name=a_float,json=aFloat,proto3" json:"a_float,omitempty"`
	ARepeatedUint64 []uint64           `protobuf:"varint,5,rep,packed,name=a_repeated_uint64,json=aRepeatedUint64,proto3" json:"a_repeated_uint64,omitempty"`
	ARepeatedInt32  []int32            `protobuf:"varint,19,rep,packed,name=a_repeated_int32,json=aRepeatedInt32,proto3" json:"a_repeated_int32,omitempty"`
	Nested          *Nested            `protobuf:"bytes,6,opt,name=nested,proto3" json:"nested,omitempty"`
	AMap            map[string]*Nested `protobuf:"bytes,10,rep,name=a_map,json=aMap,proto3" json:"a_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Anything        *anypb.Any         `protobuf:"bytes,14,opt,name=anything,proto3" json:"anything,omitempty"`
	ManyThings      []*anypb.Any       `protobuf:"bytes,15,rep,name=many_things,json=manyThings,proto3" json:"many_things,omitempty"`
	Submessage      *Message           `protobuf:"bytes,17,opt,name=submessage,proto3" json:"submessage,omitempty"`
	Children        []*Message         `protobuf:"bytes,18,rep,name=children,proto3" json:"children,omitempty"`
	StringMap       map[string]string  `protobuf:"bytes,20,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_proto_test_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetAString() string {
	if x != nil {
		return x.AString
	}
	return ""
}

func (x *Message) GetAEnum() Message_AnEnum {
	if x != nil {
		return x.AEnum
	}
	return Message_UNKNOWN
}

func (x *Message) GetAUint32() uint32 {
	if x != nil {
		return x.AUint32
	}
	return 0
}

func (x *Message) GetABytes() []byte {
	if x != nil {
		return x.ABytes
	}
	return nil
}

func (x *Message) GetAInt64() int64 {
	if x != nil {
		return x.AInt64
	}
	return 0
}

func (x *Message) GetABool() bool {
	if x != nil {
		return x.ABool
	}
	return false
}

func (x *Message) GetAFloat() float32 {
	if x != nil {
		return x.AFloat
	}
	return 0
}

func (x *Message) GetARepeatedUint64() []uint64 {
	if x != nil {
		return x.ARepeatedUint64
	}
	return nil
}

func (x *Message) GetARepeatedInt32() []int32 {
	if x != nil {
		return x.ARepeatedInt32
	}
	return nil
}

func (x *Message) GetNested() *Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *Message) GetAMap() map[string]*Nested {
	if x != nil {
		return x.AMap
	}
	return nil
}

func (x *Message) GetAnything() *anypb.Any {
	if x != nil {
		return x.Anything
	}
	return nil
}

func (x *Message) GetManyThings() []*anypb.Any {
	if x != nil {
		return x.ManyThings
	}
	return nil
}

func (x *Message) GetSubmessage() *Message {
	if x != nil {
		return x.Submessage
	}
	return nil
}

func (x *Message) GetChildren() []*Message {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Message) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

type Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bunny string `protobuf:"bytes,1,opt,name=bunny,proto3" json:"bunny,omitempty"`
	Cute  bool   `protobuf:"varint,2,opt,name=cute,proto3" json:"cute,omitempty"`
}

func (x *Nested) Reset() {
	*x = Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nested) ProtoMessage() {}

func (x *Nested) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nested.ProtoReflect.Descriptor instead.
func (*Nested) Descriptor() ([]byte, []int) {
	return file_proto_test_proto_rawDescGZIP(), []int{1}
}

func (x *Nested) GetBunny() string {
	if x != nil {
		return x.Bunny
	}
	return ""
}

func (x *Nested) GetCute() bool {
	if x != nil {
		return x.Cute
	}
	return false
}

var File_proto_test_proto protoreflect.FileDescriptor

var file_proto_test_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x06, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05,
	0x61, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x61,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2b, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x6e,
	0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x79, 0x54, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x1a,
	0x4c, 0x0a, 0x09, 0x41, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x06, 0x41,
	0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10, 0x02,
	0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x03, 0x22, 0x32, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x6e, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x75, 0x6e, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x75, 0x74, 0x65, 0x42, 0xa8, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x42,
	0x09, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x64, 0x6f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x64, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2e, 0x64,
	0x65, 0x76, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x54,
	0x65, 0x73, 0x74, 0xca, 0x02, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x54, 0x65, 0x73, 0x74,
	0xe2, 0x02, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x33, 0x54, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_test_proto_rawDescOnce sync.Once
	file_proto_test_proto_rawDescData = file_proto_test_proto_rawDesc
)

func file_proto_test_proto_rawDescGZIP() []byte {
	file_proto_test_proto_rawDescOnce.Do(func() {
		file_proto_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_test_proto_rawDescData)
	})
	return file_proto_test_proto_rawDescData
}

var file_proto_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_test_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_test_proto_goTypes = []interface{}{
	(Message_AnEnum)(0), // 0: proto3_test.Message.AnEnum
	(*Message)(nil),     // 1: proto3_test.Message
	(*Nested)(nil),      // 2: proto3_test.Nested
	nil,                 // 3: proto3_test.Message.AMapEntry
	nil,                 // 4: proto3_test.Message.StringMapEntry
	(*anypb.Any)(nil),   // 5: google.protobuf.Any
}
var file_proto_test_proto_depIdxs = []int32{
	0, // 0: proto3_test.Message.a_enum:type_name -> proto3_test.Message.AnEnum
	2, // 1: proto3_test.Message.nested:type_name -> proto3_test.Nested
	3, // 2: proto3_test.Message.a_map:type_name -> proto3_test.Message.AMapEntry
	5, // 3: proto3_test.Message.anything:type_name -> google.protobuf.Any
	5, // 4: proto3_test.Message.many_things:type_name -> google.protobuf.Any
	1, // 5: proto3_test.Message.submessage:type_name -> proto3_test.Message
	1, // 6: proto3_test.Message.children:type_name -> proto3_test.Message
	4, // 7: proto3_test.Message.string_map:type_name -> proto3_test.Message.StringMapEntry
	2, // 8: proto3_test.Message.AMapEntry.value:type_name -> proto3_test.Nested
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_test_proto_init() }
func file_proto_test_proto_init() {
	if File_proto_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_test_proto_goTypes,
		DependencyIndexes: file_proto_test_proto_depIdxs,
		EnumInfos:         file_proto_test_proto_enumTypes,
		MessageInfos:      file_proto_test_proto_msgTypes,
	}.Build()
	File_proto_test_proto = out.File
	file_proto_test_proto_rawDesc = nil
	file_proto_test_proto_goTypes = nil
	file_proto_test_proto_depIdxs = nil
}
